diff --git a/node_modules/@tldraw/editor/dist-esm/index.d.mts b/node_modules/@tldraw/editor/dist-esm/index.d.mts
index 9579d6b..c8aed15 100644
--- a/node_modules/@tldraw/editor/dist-esm/index.d.mts
+++ b/node_modules/@tldraw/editor/dist-esm/index.d.mts
@@ -5790,7 +5790,7 @@ export declare interface SvgExportContext {
 /** @public */
 export declare interface SvgExportDef {
     key: string;
-    getElement(): null | Promise<null | ReactElement> | ReactElement;
+    getElement(document: Document): null | Promise<null | ReactElement> | ReactElement;
 }
 
 /**
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs b/node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
index 4cb8e6d..490629a 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/TldrawEditor.mjs
@@ -282,11 +282,12 @@ function TldrawEditorWithReadyStore({
         editor.blur();
       }
       if (autoFocus && noAutoFocus()) {
-        editor.getContainer().addEventListener("pointerdown", handleFocusOnPointerDown);
-        document.body.addEventListener("pointerdown", handleBlurOnPointerDown);
+        const container2 = editor.getContainer();
+        container2.addEventListener("pointerdown", handleFocusOnPointerDown);
+        container2.ownerDocument.body.addEventListener("pointerdown", handleBlurOnPointerDown);
         return () => {
-          editor.getContainer()?.removeEventListener("pointerdown", handleFocusOnPointerDown);
-          document.body.removeEventListener("pointerdown", handleBlurOnPointerDown);
+          container2.removeEventListener("pointerdown", handleFocusOnPointerDown);
+          container2.ownerDocument.body.removeEventListener("pointerdown", handleBlurOnPointerDown);
         };
       }
     },
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/FontManager/FontManager.mjs b/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/FontManager/FontManager.mjs
index 7bb946b..268cb0d 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/FontManager/FontManager.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/FontManager/FontManager.mjs
@@ -71,6 +71,7 @@ class FontManager {
       state: "loading",
       instance,
       loadingPromise: instance.load().then(() => {
+        const document = this.editor.getContainer().ownerDocument;
         document.fonts.add(instance);
         this.fontStates.update(font, (s) => ({ ...s, state: "ready" }));
       }).catch((err) => {
@@ -100,6 +101,7 @@ class FontManager {
     }
   }
   findOrCreateFontFace(font) {
+    const document = this.editor.getContainer().ownerDocument;
     for (const existing of document.fonts) {
       if (existing.family === font.family && objectMapEntries(defaultFontFaceDescriptors).every(
         ([key, defaultValue]) => existing[key] === (font[key] ?? defaultValue)
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TextManager/TextManager.mjs b/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TextManager/TextManager.mjs
index a523033..c7164a7 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TextManager/TextManager.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/editor/managers/TextManager/TextManager.mjs
@@ -23,7 +23,7 @@ const initialDefaultStyles = Object.freeze({
 class TextManager {
   constructor(editor) {
     this.editor = editor;
-    const elm = document.createElement("div");
+    const elm = editor.getContainer().ownerDocument.createElement("div");
     elm.classList.add("tl-text");
     elm.classList.add("tl-text-measure");
     elm.setAttribute("dir", "auto");
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/exports/FontEmbedder.mjs b/node_modules/@tldraw/editor/dist-esm/lib/exports/FontEmbedder.mjs
index 1343543..deee4ea 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/exports/FontEmbedder.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/exports/FontEmbedder.mjs
@@ -60,9 +60,9 @@ class FontEmbedder {
     __publicField(this, "fontFacesToEmbed", /* @__PURE__ */ new Set());
     __publicField(this, "pendingPromises", []);
   }
-  startFindingCurrentDocumentFontFaces() {
+  startFindingDocumentFontFaces(document) {
     assert(!this.fontFacesPromise, "FontEmbedder already started");
-    this.fontFacesPromise = getCurrentDocumentFontFaces();
+    this.fontFacesPromise = getDocumentFontFaces(document);
   }
   onFontFamilyValue(fontFamilyValue) {
     assert(this.fontFacesPromise, "FontEmbedder not started");
@@ -104,7 +104,7 @@ class FontEmbedder {
 _init = __decoratorStart(null);
 __decorateElement(_init, 1, "onFontFamilyValue", _onFontFamilyValue_dec, FontEmbedder);
 __decoratorMetadata(_init, FontEmbedder);
-async function getCurrentDocumentFontFaces() {
+async function getDocumentFontFaces(document) {
   const fontFaces = [];
   const styleSheetsWithoutSvgExports = Array.from(document.styleSheets).filter(
     (styleSheet) => !styleSheet.ownerNode?.closest(`.${SVG_EXPORT_CLASSNAME}`)
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/exports/StyleEmbedder.mjs b/node_modules/@tldraw/editor/dist-esm/lib/exports/StyleEmbedder.mjs
index 47289ef..6fa5f62 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/exports/StyleEmbedder.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/exports/StyleEmbedder.mjs
@@ -86,7 +86,7 @@ class StyleEmbedder {
       visited.add(element);
       const shadowRoot = element.shadowRoot;
       if (shadowRoot) {
-        const clonedCustomEl = document.createElement("div");
+        const clonedCustomEl = element.ownerDocument.createElement("div");
         this.styles.set(clonedCustomEl, this.styles.get(element));
         clonedCustomEl.setAttribute("data-tl-custom-element", element.tagName);
         (clonedParent ?? element.parentElement).appendChild(clonedCustomEl);
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs b/node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs
index 43ea40a..11e303f 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs
@@ -10,7 +10,7 @@ async function exportToSvg(editor, shapeIds, opts = {}) {
   const result = getSvgJsx(editor, shapeIds, opts);
   if (!result) return void 0;
   const container = editor.getContainer();
-  const renderTarget = document.createElement("div");
+  const renderTarget = container.ownerDocument.createElement("div");
   renderTarget.className = SVG_EXPORT_CLASSNAME;
   renderTarget.inert = true;
   renderTarget.tabIndex = -1;
@@ -32,7 +32,7 @@ async function exportToSvg(editor, shapeIds, opts = {}) {
     });
     await result.exportDelay.resolve();
     const svg = renderTarget.firstElementChild;
-    assert(svg instanceof SVGSVGElement, "Expected an SVG element");
+    assert(!!svg?.instanceOf(SVGSVGElement), "Expected an SVG element");
     await applyChangesToForeignObjects(svg);
     return { svg, width: result.width, height: result.height };
   } finally {
@@ -49,7 +49,7 @@ async function applyChangesToForeignObjects(svg) {
   if (!foreignObjectChildren.length) return;
   const styleEmbedder = new StyleEmbedder(svg);
   try {
-    styleEmbedder.fonts.startFindingCurrentDocumentFontFaces();
+    styleEmbedder.fonts.startFindingDocumentFontFaces(svg.ownerDocument);
     await Promise.all(foreignObjectChildren.map((el) => embedMedia(el)));
     for (const el of foreignObjectChildren) {
       styleEmbedder.readRootElementStyles(el);
@@ -59,7 +59,7 @@ async function applyChangesToForeignObjects(svg) {
     styleEmbedder.unwrapCustomElements();
     const pseudoCss = styleEmbedder.embedStyles();
     if (fontCss || pseudoCss) {
-      const style = document.createElementNS("http://www.w3.org/2000/svg", "style");
+      const style = svg.ownerDocument.createElementNS("http://www.w3.org/2000/svg", "style");
       style.textContent = `${fontCss}
 ${pseudoCss}`;
       svg.prepend(style);
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/exports/getSvgJsx.mjs b/node_modules/@tldraw/editor/dist-esm/lib/exports/getSvgJsx.mjs
index 5c9008c..8ff04a4 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/exports/getSvgJsx.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/exports/getSvgJsx.mjs
@@ -23,7 +23,8 @@ import { suffixSafeId, useUniqueSafeId } from "../hooks/useSafeId.mjs";
 import { Mat } from "../primitives/Mat.mjs";
 import { ExportDelay } from "./ExportDelay.mjs";
 function getSvgJsx(editor, ids, opts = {}) {
-  if (!window.document) throw Error("No document");
+  const editorDocument = editor.getContainer().ownerDocument;
+  if (!editorDocument) throw Error("No document");
   const {
     scale = 1,
     // should we include the background in the export? or is it transparent?
@@ -56,7 +57,7 @@ function getSvgJsx(editor, ids, opts = {}) {
   const w = bbox.width * scale;
   const h = bbox.height * scale;
   try {
-    document.body.focus?.();
+    editorDocument.body.focus?.();
   } catch {
   }
   const exportDelay = new ExportDelay(editor.options.maxExportDelayMs);
@@ -100,7 +101,7 @@ function SvgExport({
   const addExportDef = useEvent((def) => {
     stateAtom.update((state) => {
       if (hasOwnProperty(state.defsById, def.key)) return state;
-      const promise = Promise.resolve(def.getElement());
+      const promise = Promise.resolve(def.getElement(editor.getContainer().ownerDocument));
       waitUntil(
         promise.then((result) => {
           stateAtom.update((state2) => ({
diff --git a/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs b/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
index 84db620..ebab46d 100644
--- a/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
+++ b/node_modules/@tldraw/editor/dist-esm/lib/hooks/useDocumentEvents.mjs
@@ -179,17 +179,17 @@ function useDocumentEvents() {
     };
     container.addEventListener("touchstart", handleTouchStart, { passive: false });
     container.addEventListener("wheel", handleWheel, { passive: false });
-    document.addEventListener("gesturestart", preventDefault);
-    document.addEventListener("gesturechange", preventDefault);
-    document.addEventListener("gestureend", preventDefault);
+    container.ownerDocument.addEventListener("gesturestart", preventDefault);
+    container.ownerDocument.addEventListener("gesturechange", preventDefault);
+    container.ownerDocument.addEventListener("gestureend", preventDefault);
     container.addEventListener("keydown", handleKeyDown);
     container.addEventListener("keyup", handleKeyUp);
     return () => {
       container.removeEventListener("touchstart", handleTouchStart);
       container.removeEventListener("wheel", handleWheel);
-      document.removeEventListener("gesturestart", preventDefault);
-      document.removeEventListener("gesturechange", preventDefault);
-      document.removeEventListener("gestureend", preventDefault);
+      container.ownerDocument.removeEventListener("gesturestart", preventDefault);
+      container.ownerDocument.removeEventListener("gesturechange", preventDefault);
+      container.ownerDocument.removeEventListener("gestureend", preventDefault);
       container.removeEventListener("keydown", handleKeyDown);
       container.removeEventListener("keyup", handleKeyUp);
     };
diff --git a/node_modules/@tldraw/editor/src/lib/TldrawEditor.tsx b/node_modules/@tldraw/editor/src/lib/TldrawEditor.tsx
index eefd126..9f82c62 100644
--- a/node_modules/@tldraw/editor/src/lib/TldrawEditor.tsx
+++ b/node_modules/@tldraw/editor/src/lib/TldrawEditor.tsx
@@ -565,12 +565,13 @@ function TldrawEditorWithReadyStore({
 			}
 
 			if (autoFocus && noAutoFocus()) {
-				editor.getContainer().addEventListener('pointerdown', handleFocusOnPointerDown)
-				document.body.addEventListener('pointerdown', handleBlurOnPointerDown)
+				const container = editor.getContainer()
+				container.addEventListener('pointerdown', handleFocusOnPointerDown)
+				container.ownerDocument.body.addEventListener('pointerdown', handleBlurOnPointerDown)
 
 				return () => {
-					editor.getContainer()?.removeEventListener('pointerdown', handleFocusOnPointerDown)
-					document.body.removeEventListener('pointerdown', handleBlurOnPointerDown)
+					container.removeEventListener('pointerdown', handleFocusOnPointerDown)
+					container.ownerDocument.body.removeEventListener('pointerdown', handleBlurOnPointerDown)
 				}
 			}
 		},
diff --git a/node_modules/@tldraw/editor/src/lib/editor/managers/FontManager/FontManager.ts b/node_modules/@tldraw/editor/src/lib/editor/managers/FontManager/FontManager.ts
index a6895b6..8e53d84 100644
--- a/node_modules/@tldraw/editor/src/lib/editor/managers/FontManager/FontManager.ts
+++ b/node_modules/@tldraw/editor/src/lib/editor/managers/FontManager/FontManager.ts
@@ -160,6 +160,7 @@ export class FontManager {
 			loadingPromise: instance
 				.load()
 				.then(() => {
+					const document = this.editor.getContainer().ownerDocument
 					document.fonts.add(instance)
 					this.fontStates.update(font, (s) => ({ ...s, state: 'ready' }))
 				})
@@ -193,6 +194,7 @@ export class FontManager {
 	}
 
 	private findOrCreateFontFace(font: TLFontFace) {
+		const document = this.editor.getContainer().ownerDocument
 		for (const existing of document.fonts) {
 			if (
 				existing.family === font.family &&
diff --git a/node_modules/@tldraw/editor/src/lib/editor/managers/TextManager/TextManager.ts b/node_modules/@tldraw/editor/src/lib/editor/managers/TextManager/TextManager.ts
index 2173f56..8787e61 100644
--- a/node_modules/@tldraw/editor/src/lib/editor/managers/TextManager/TextManager.ts
+++ b/node_modules/@tldraw/editor/src/lib/editor/managers/TextManager/TextManager.ts
@@ -75,7 +75,7 @@ export class TextManager {
 	private elm: HTMLDivElement
 
 	constructor(public editor: Editor) {
-		const elm = document.createElement('div')
+		const elm = editor.getContainer().ownerDocument.createElement('div')
 		elm.classList.add('tl-text')
 		elm.classList.add('tl-text-measure')
 		elm.setAttribute('dir', 'auto')
diff --git a/node_modules/@tldraw/editor/src/lib/editor/types/SvgExportContext.tsx b/node_modules/@tldraw/editor/src/lib/editor/types/SvgExportContext.tsx
index f5cac04..0a87f4b 100644
--- a/node_modules/@tldraw/editor/src/lib/editor/types/SvgExportContext.tsx
+++ b/node_modules/@tldraw/editor/src/lib/editor/types/SvgExportContext.tsx
@@ -9,7 +9,7 @@ import { Editor } from '../Editor'
 /** @public */
 export interface SvgExportDef {
 	key: string
-	getElement(): Promise<ReactElement | null> | ReactElement | null
+	getElement(document: Document): Promise<ReactElement | null> | ReactElement | null
 }
 
 /** @public */
diff --git a/node_modules/@tldraw/editor/src/lib/exports/FontEmbedder.ts b/node_modules/@tldraw/editor/src/lib/exports/FontEmbedder.ts
index 51aabc7..0f0b9e1 100644
--- a/node_modules/@tldraw/editor/src/lib/exports/FontEmbedder.ts
+++ b/node_modules/@tldraw/editor/src/lib/exports/FontEmbedder.ts
@@ -26,9 +26,9 @@ export class FontEmbedder {
 	private readonly fontFacesToEmbed = new Set<ParsedFontFace>()
 	private readonly pendingPromises: Promise<void>[] = []
 
-	startFindingCurrentDocumentFontFaces() {
+	startFindingDocumentFontFaces(document: Document) {
 		assert(!this.fontFacesPromise, 'FontEmbedder already started')
-		this.fontFacesPromise = getCurrentDocumentFontFaces()
+		this.fontFacesPromise = getDocumentFontFaces(document)
 	}
 
 	@bind onFontFamilyValue(fontFamilyValue: string) {
@@ -80,7 +80,7 @@ export class FontEmbedder {
 	}
 }
 
-async function getCurrentDocumentFontFaces() {
+async function getDocumentFontFaces(document: Document) {
 	const fontFaces: (ParsedFontFace[] | Promise<ParsedFontFace[] | null>)[] = []
 
 	// In exportToSvg we add the exported node to the DOM temporarily.
diff --git a/node_modules/@tldraw/editor/src/lib/exports/StyleEmbedder.ts b/node_modules/@tldraw/editor/src/lib/exports/StyleEmbedder.ts
index b66a3d7..4aa80ce 100644
--- a/node_modules/@tldraw/editor/src/lib/exports/StyleEmbedder.ts
+++ b/node_modules/@tldraw/editor/src/lib/exports/StyleEmbedder.ts
@@ -116,7 +116,7 @@ export class StyleEmbedder {
 			const shadowRoot = element.shadowRoot
 
 			if (shadowRoot) {
-				const clonedCustomEl = document.createElement('div')
+				const clonedCustomEl = element.ownerDocument.createElement('div')
 				this.styles.set(clonedCustomEl, this.styles.get(element)!)
 
 				clonedCustomEl.setAttribute('data-tl-custom-element', element.tagName)
diff --git a/node_modules/@tldraw/editor/src/lib/exports/exportToSvg.tsx b/node_modules/@tldraw/editor/src/lib/exports/exportToSvg.tsx
index 98f358f..227756b 100644
--- a/node_modules/@tldraw/editor/src/lib/exports/exportToSvg.tsx
+++ b/node_modules/@tldraw/editor/src/lib/exports/exportToSvg.tsx
@@ -26,7 +26,7 @@ export async function exportToSvg(
 	// without this CSS and layout aren't computed correctly, which we need to make sure any
 	// <foreignObject> elements have their styles and content inlined correctly.
 	const container = editor.getContainer()
-	const renderTarget = document.createElement('div')
+	const renderTarget = container.ownerDocument.createElement('div')
 	renderTarget.className = SVG_EXPORT_CLASSNAME
 	// we hide the element visually, but we don't want it to be focusable or interactive in any way either
 	renderTarget.inert = true
@@ -60,7 +60,7 @@ export async function exportToSvg(
 
 		// Extract the rendered SVG element from the react root
 		const svg = renderTarget.firstElementChild
-		assert(svg instanceof SVGSVGElement, 'Expected an SVG element')
+		assert(!!svg?.instanceOf(SVGSVGElement), 'Expected an SVG element')
 
 		// And apply any changes to <foreignObject> elements that we need to make. while we're in
 		// the document, these elements work exactly as we'd expect from other dom elements - they
@@ -95,7 +95,7 @@ async function applyChangesToForeignObjects(svg: SVGSVGElement) {
 
 	try {
 		// begin traversing stylesheets to find @font-face declarations we might need to embed
-		styleEmbedder.fonts.startFindingCurrentDocumentFontFaces()
+		styleEmbedder.fonts.startFindingDocumentFontFaces(svg.ownerDocument)
 
 		// embed any media elements in the foreignObject children. images will get converted to data
 		// urls, and things like videos will be converted to images.
@@ -126,7 +126,7 @@ async function applyChangesToForeignObjects(svg: SVGSVGElement) {
 
 		// add the CSS to the SVG
 		if (fontCss || pseudoCss) {
-			const style = document.createElementNS('http://www.w3.org/2000/svg', 'style')
+			const style = svg.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'style')
 			style.textContent = `${fontCss}\n${pseudoCss}`
 			svg.prepend(style)
 		}
diff --git a/node_modules/@tldraw/editor/src/lib/exports/getSvgJsx.tsx b/node_modules/@tldraw/editor/src/lib/exports/getSvgJsx.tsx
index 26832ff..b35b7f1 100644
--- a/node_modules/@tldraw/editor/src/lib/exports/getSvgJsx.tsx
+++ b/node_modules/@tldraw/editor/src/lib/exports/getSvgJsx.tsx
@@ -37,7 +37,8 @@ import { Mat } from '../primitives/Mat'
 import { ExportDelay } from './ExportDelay'
 
 export function getSvgJsx(editor: Editor, ids: TLShapeId[], opts: TLImageExportOptions = {}) {
-	if (!window.document) throw Error('No document')
+	const editorDocument = editor.getContainer().ownerDocument
+	if (!editorDocument) throw Error('No document')
 
 	const {
 		scale = 1,
@@ -88,7 +89,7 @@ export function getSvgJsx(editor: Editor, ids: TLShapeId[], opts: TLImageExportO
 	const h = bbox.height * scale
 
 	try {
-		document.body.focus?.() // weird but necessary
+		editorDocument.body.focus?.() // weird but necessary
 	} catch {
 		// not implemented
 	}
@@ -160,7 +161,7 @@ function SvgExport({
 		stateAtom.update((state) => {
 			if (hasOwnProperty(state.defsById, def.key)) return state
 
-			const promise = Promise.resolve(def.getElement())
+			const promise = Promise.resolve(def.getElement(editor.getContainer().ownerDocument))
 			waitUntil(
 				promise.then((result) => {
 					stateAtom.update((state) => ({
diff --git a/node_modules/@tldraw/editor/src/lib/hooks/useDocumentEvents.ts b/node_modules/@tldraw/editor/src/lib/hooks/useDocumentEvents.ts
index 7f6a1d4..338acd3 100644
--- a/node_modules/@tldraw/editor/src/lib/hooks/useDocumentEvents.ts
+++ b/node_modules/@tldraw/editor/src/lib/hooks/useDocumentEvents.ts
@@ -275,9 +275,9 @@ export function useDocumentEvents() {
 
 		container.addEventListener('wheel', handleWheel, { passive: false })
 
-		document.addEventListener('gesturestart', preventDefault)
-		document.addEventListener('gesturechange', preventDefault)
-		document.addEventListener('gestureend', preventDefault)
+		container.ownerDocument.addEventListener('gesturestart', preventDefault)
+		container.ownerDocument.addEventListener('gesturechange', preventDefault)
+		container.ownerDocument.addEventListener('gestureend', preventDefault)
 
 		container.addEventListener('keydown', handleKeyDown)
 		container.addEventListener('keyup', handleKeyUp)
@@ -287,9 +287,9 @@ export function useDocumentEvents() {
 
 			container.removeEventListener('wheel', handleWheel)
 
-			document.removeEventListener('gesturestart', preventDefault)
-			document.removeEventListener('gesturechange', preventDefault)
-			document.removeEventListener('gestureend', preventDefault)
+			container.ownerDocument.removeEventListener('gesturestart', preventDefault)
+			container.ownerDocument.removeEventListener('gesturechange', preventDefault)
+			container.ownerDocument.removeEventListener('gestureend', preventDefault)
 
 			container.removeEventListener('keydown', handleKeyDown)
 			container.removeEventListener('keyup', handleKeyUp)
diff --git a/node_modules/@tldraw/editor/src/lib/utils/dom.ts b/node_modules/@tldraw/editor/src/lib/utils/dom.ts
index e954778..62e161a 100644
--- a/node_modules/@tldraw/editor/src/lib/utils/dom.ts
+++ b/node_modules/@tldraw/editor/src/lib/utils/dom.ts
@@ -16,6 +16,27 @@ whatever reason.
 import React from 'react'
 import { debugFlags, pointerCaptureTrackingObject } from './debug-flags'
 
+declare global {
+	interface Node {
+		/**
+		 * Cross-window capable instanceof check, a drop-in replacement
+		 * for instanceof checks on DOM Nodes. Remember to also check
+		 * for nulls when necessary.
+		 *
+		 * #NOTE: Copied from Obsidian.md API https://github.com/obsidianmd/obsidian-api/blob/master/obsidian.d.ts
+		 *
+		 * @param type
+		 */
+		instanceOf<T>(type: { new (): T }): this is T
+		/**
+		 * The window object this node belongs to, or the global window.
+		 *
+		 * #NOTE: Copied from Obsidian.md API
+		 */
+		win: Window
+	}
+}
+
 /** @public */
 export function loopToHtmlElement(elm: Element): HTMLElement {
 	if (elm.nodeType === Node.ELEMENT_NODE) return elm as HTMLElement
