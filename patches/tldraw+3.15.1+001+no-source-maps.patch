diff --git a/node_modules/tldraw/dist-esm/index.d.mts b/node_modules/tldraw/dist-esm/index.d.mts
index 7fa4d3b..fc098d1 100644
--- a/node_modules/tldraw/dist-esm/index.d.mts
+++ b/node_modules/tldraw/dist-esm/index.d.mts
@@ -58,6 +58,7 @@ import { TLArrowShapeArrowheadStyle } from '@tldraw/editor';
 import { TLArrowShapeProps } from '@tldraw/editor';
 import { TLAsset } from '@tldraw/editor';
 import { TLAssetId } from '@tldraw/editor';
+import { TLAssetStore } from '@tldraw/editor';
 import { TLBookmarkAsset } from '@tldraw/editor';
 import { TLBookmarkShape } from '@tldraw/editor';
 import { TLBookmarkShapeProps } from '@tldraw/editor';
@@ -2283,7 +2284,7 @@ export declare enum PORTRAIT_BREAKPOINT {
 export declare function PreferencesGroup(): JSX_2.Element;
 
 /** @public */
-export declare function preloadFont(id: string, font: TLTypeFace): Promise<FontFace>;
+export declare function preloadFont(id: string, font: TLTypeFace, targetDocument?: Document): Promise<FontFace>;
 
 /** @public @react */
 export declare function PrintItem(): JSX_2.Element;
@@ -2819,10 +2820,22 @@ export declare interface TldrawImageProps extends TLImageExportOptions {
      * The license key.
      */
     licenseKey?: string;
+    /**
+     * How should this store resolve assets?
+     */
+    assets?: TLAssetStore;
     /**
      * Asset URL overrides.
      */
     assetUrls?: TLUiAssetUrlOverrides;
+    /**
+     * The document to use in place of the global document object for the following:
+     *
+     * - preloading fonts
+     *
+     * Using this prevents bugs when using pop-out windows in Electron.
+     */
+    targetDocument?: Document;
     /**
      * Text options for the editor.
      */
diff --git a/node_modules/tldraw/dist-esm/lib/TldrawImage.mjs b/node_modules/tldraw/dist-esm/lib/TldrawImage.mjs
index 5d8ffe5..daa276f 100644
--- a/node_modules/tldraw/dist-esm/lib/TldrawImage.mjs
+++ b/node_modules/tldraw/dist-esm/lib/TldrawImage.mjs
@@ -29,7 +29,12 @@ const TldrawImage = memo(function TldrawImage2(props) {
     () => mergeArraysAndReplaceDefaults("type", _bindingUtils, defaultBindingUtils),
     [_bindingUtils]
   );
-  const store = useTLStore({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults });
+  const store = useTLStore({
+    assets: props.assets,
+    snapshot: props.snapshot,
+    shapeUtils: shapeUtilsWithDefaults
+  });
+  const targetDocument = props.targetDocument ?? document;
   const {
     pageId,
     bounds,
@@ -49,7 +54,7 @@ const TldrawImage = memo(function TldrawImage2(props) {
     if (!container) return;
     if (!store) return;
     let isCancelled = false;
-    const tempElm = document.createElement("div");
+    const tempElm = targetDocument.createElement("div");
     container.appendChild(tempElm);
     container.classList.add("tl-container", "tl-theme__light");
     const editor = new Editor({
@@ -100,7 +105,8 @@ const TldrawImage = memo(function TldrawImage2(props) {
     licenseKey,
     pixelRatio,
     assetUrlsWithOverrides,
-    textOptions
+    textOptions,
+    targetDocument
   ]);
   useEffect(() => {
     return () => {
diff --git a/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultRichTextToolbar.mjs b/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultRichTextToolbar.mjs
index 7d16369..73a5b18 100644
--- a/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultRichTextToolbar.mjs
+++ b/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/DefaultRichTextToolbar.mjs
@@ -127,6 +127,7 @@ function useIsMousingDownOnTextEditor(textEditor) {
     touchDownEvents.forEach((eventName) => {
       textEditor.view.dom.addEventListener(eventName, handlePointingDown);
     });
+    const document = textEditor.view.dom.ownerDocument;
     touchUpEvents.forEach((eventName) => {
       document.body.addEventListener(eventName, handlePointingUp);
     });
diff --git a/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs b/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
index ebb04d6..9535412 100644
--- a/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
+++ b/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs
@@ -78,7 +78,7 @@ function OverflowingToolbar({ children }) {
     }
     rButtons.current = Array.from(mainToolsRef.current?.children ?? []).filter(
       (el) => {
-        if (!(el instanceof HTMLElement)) return false;
+        if (!el.instanceOf(HTMLElement)) return false;
         if (el.tagName.toLowerCase() !== "button") return false;
         return !!(el.offsetWidth || el.offsetHeight);
       }
@@ -114,9 +114,9 @@ function OverflowingToolbar({ children }) {
         rButtons.current[index]?.click();
       }
     }
-    document.addEventListener("keydown", handleKeyDown);
+    editor.getContainer().ownerDocument.addEventListener("keydown", handleKeyDown);
     return () => {
-      document.removeEventListener("keydown", handleKeyDown);
+      editor.getContainer().ownerDocument.removeEventListener("keydown", handleKeyDown);
     };
   }, [editor]);
   const popoverId = "toolbar overflow";
diff --git a/node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs b/node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs
index dadc2d7..cc16e9e 100644
--- a/node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs
+++ b/node_modules/tldraw/dist-esm/lib/ui/components/primitives/TldrawUiButtonPicker.mjs
@@ -1,6 +1,7 @@
 import { jsx } from "react/jsx-runtime";
 import {
   DefaultColorStyle,
+  useContainer,
   useEditor
 } from "@tldraw/editor";
 import classNames from "classnames";
@@ -22,6 +23,7 @@ const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker2(props) {
     onHistoryMark,
     theme
   } = props;
+  const container = useContainer();
   const editor = useEditor();
   const msg = useTranslation();
   const breakpoint = useBreakpoint();
@@ -35,7 +37,7 @@ const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker2(props) {
   } = useMemo(() => {
     const handlePointerUp = () => {
       rPointing.current = false;
-      window.removeEventListener("pointerup", handlePointerUp);
+      container.win.removeEventListener("pointerup", handlePointerUp);
       const origActiveEl = rPointingOriginalActiveElement.current;
       if (origActiveEl && (["TEXTAREA", "INPUT"].includes(origActiveEl.nodeName) || origActiveEl.isContentEditable)) {
         origActiveEl.focus();
@@ -55,8 +57,8 @@ const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker2(props) {
       onHistoryMark?.("point picker item");
       onValueChange(style, id);
       rPointing.current = true;
-      rPointingOriginalActiveElement.current = document.activeElement;
-      window.addEventListener("pointerup", handlePointerUp);
+      rPointingOriginalActiveElement.current = container.ownerDocument.activeElement;
+      container.win.addEventListener("pointerup", handlePointerUp);
     };
     const handleButtonPointerEnter2 = (e) => {
       if (!rPointing.current) return;
@@ -74,7 +76,7 @@ const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker2(props) {
       handleButtonPointerEnter: handleButtonPointerEnter2,
       handleButtonPointerUp: handleButtonPointerUp2
     };
-  }, [editor, breakpoint, value, onHistoryMark, onValueChange, style]);
+  }, [editor, breakpoint, value, onHistoryMark, onValueChange, style, container]);
   return /* @__PURE__ */ jsx(
     TldrawUiToolbarToggleGroup,
     {
diff --git a/node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs b/node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
index 3424258..224cf1d 100644
--- a/node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
+++ b/node_modules/tldraw/dist-esm/lib/ui/hooks/useClipboardEvents.mjs
@@ -55,7 +55,7 @@ const isSvgText = (text) => {
 };
 const INPUTS = ["input", "select", "textarea"];
 function areShortcutsDisabled(editor) {
-  const { activeElement } = document;
+  const { activeElement } = editor.getContainer().ownerDocument;
   return editor.menus.hasAnyOpenMenus() || activeElement && (activeElement.isContentEditable || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1);
 }
 const handleText = (editor, data, point, sources) => {
@@ -439,7 +439,7 @@ function useMenuClipboardEvents() {
     async function onPaste(data, source, point) {
       if (!editor) return;
       if (editor.getEditingShapeId() !== null) return;
-      if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
+      if (Array.isArray(data) && data[0] instanceof editor.getContainer().win.window.ClipboardItem) {
         handlePasteFromClipboardApi({ editor, clipboardItems: data, point });
         trackEvent("paste", { source: "menu" });
       } else {
@@ -490,6 +490,7 @@ function useNativeClipboardEvents() {
         });
       }
     };
+    const container = editor.getContainer();
     const paste = (e) => {
       if (disablingMiddleClickPaste) {
         stopEventPropagation(e);
@@ -510,7 +511,7 @@ function useNativeClipboardEvents() {
         const fallbackFiles = Array.from(e.clipboardData?.files || []);
         navigator.clipboard.read().then(
           (clipboardItems) => {
-            if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
+            if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof container.win.window.ClipboardItem) {
               handlePasteFromClipboardApi({ editor, clipboardItems, point, fallbackFiles });
             }
           },
@@ -524,15 +525,15 @@ function useNativeClipboardEvents() {
       preventDefault(e);
       trackEvent("paste", { source: "kbd" });
     };
-    document.addEventListener("copy", copy);
-    document.addEventListener("cut", cut);
-    document.addEventListener("paste", paste);
-    document.addEventListener("pointerup", pointerUpHandler);
+    container.ownerDocument.addEventListener("copy", copy);
+    container.ownerDocument.addEventListener("cut", cut);
+    container.ownerDocument.addEventListener("paste", paste);
+    container.ownerDocument.addEventListener("pointerup", pointerUpHandler);
     return () => {
-      document.removeEventListener("copy", copy);
-      document.removeEventListener("cut", cut);
-      document.removeEventListener("paste", paste);
-      document.removeEventListener("pointerup", pointerUpHandler);
+      container.ownerDocument.removeEventListener("copy", copy);
+      container.ownerDocument.removeEventListener("cut", cut);
+      container.ownerDocument.removeEventListener("paste", paste);
+      container.ownerDocument.removeEventListener("pointerup", pointerUpHandler);
     };
   }, [editor, trackEvent, appIsFocused]);
 }
diff --git a/node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs b/node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs
index ce5b32d..5fe9f60 100644
--- a/node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs
+++ b/node_modules/tldraw/dist-esm/lib/ui/hooks/useKeyboardShortcuts.mjs
@@ -1,6 +1,7 @@
 import {
   isAccelKey,
   preventDefault,
+  useContainer,
   useEditor,
   useValue
 } from "@tldraw/editor";
@@ -18,6 +19,7 @@ const SKIP_KBDS = [
   "asset"
 ];
 function useKeyboardShortcuts() {
+  const container = useContainer();
   const editor = useEditor();
   const isReadonlyMode = useReadonly();
   const actions = useActions();
@@ -26,9 +28,9 @@ function useKeyboardShortcuts() {
   useEffect(() => {
     if (!isFocused) return;
     const disposables = new Array();
-    const container = editor.getContainer();
+    const container2 = editor.getContainer();
     const hot = (keys, callback) => {
-      hotkeys(keys, { element: container.ownerDocument.body }, callback);
+      hotkeys(keys, { element: container2.ownerDocument.body }, callback);
       disposables.push(() => {
         hotkeys.unbind(keys, callback);
       });
@@ -36,7 +38,7 @@ function useKeyboardShortcuts() {
     const hotUp = (keys, callback) => {
       hotkeys(
         keys,
-        { element: container.ownerDocument.body, keyup: true, keydown: false },
+        { element: container2.ownerDocument.body, keyup: true, keydown: false },
         callback
       );
       disposables.push(() => {
@@ -112,7 +114,7 @@ function useKeyboardShortcuts() {
     return () => {
       disposables.forEach((d) => d());
     };
-  }, [actions, tools, isReadonlyMode, editor, isFocused]);
+  }, [actions, tools, isReadonlyMode, editor, container, isFocused]);
 }
 function areShortcutsDisabled(editor) {
   return editor.menus.hasAnyOpenMenus() || editor.getEditingShapeId() !== null || editor.getCrashingError() || !editor.user.getAreKeyboardShortcutsEnabled();
diff --git a/node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs b/node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs
index 6ba966f..2a6ff39 100644
--- a/node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs
+++ b/node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs
@@ -1,4 +1,4 @@
-async function preloadFont(id, font) {
+async function preloadFont(id, font, targetDocument) {
   const {
     url,
     style = "normal",
@@ -22,7 +22,7 @@ async function preloadFont(id, font) {
   };
   const fontInstance = new FontFace(id, `url(${url})`, descriptors);
   await fontInstance.load();
-  document.fonts.add(fontInstance);
+  (targetDocument ?? document).fonts.add(fontInstance);
   fontInstance.$$_url = url;
   fontInstance.$$_fontface = `
 @font-face {
diff --git a/node_modules/tldraw/dist-esm/lib/utils/export/export.mjs b/node_modules/tldraw/dist-esm/lib/utils/export/export.mjs
index 808cf20..33325ad 100644
--- a/node_modules/tldraw/dist-esm/lib/utils/export/export.mjs
+++ b/node_modules/tldraw/dist-esm/lib/utils/export/export.mjs
@@ -46,7 +46,7 @@ const clipboardMimeTypesByFormat = {
   jpeg: "image/jpeg",
   png: "image/png",
   webp: "image/webp",
-  svg: "text/plain"
+  svg: "image/svg+xml"
 };
 function exportToImagePromiseForClipboard(editor, ids, opts = {}) {
   const idsToUse = ids?.length ? ids : [...editor.getCurrentPageShapeIds()];
diff --git a/node_modules/tldraw/src/lib/TldrawImage.tsx b/node_modules/tldraw/src/lib/TldrawImage.tsx
index 37fe0e3..628eefe 100644
--- a/node_modules/tldraw/src/lib/TldrawImage.tsx
+++ b/node_modules/tldraw/src/lib/TldrawImage.tsx
@@ -2,6 +2,7 @@ import {
 	Editor,
 	TLAnyBindingUtilConstructor,
 	TLAnyShapeUtilConstructor,
+	TLAssetStore,
 	TLEditorSnapshot,
 	TLImageExportOptions,
 	TLPageId,
@@ -47,10 +48,22 @@ export interface TldrawImageProps extends TLImageExportOptions {
 	 * The license key.
 	 */
 	licenseKey?: string
+	/**
+	 * How should this store resolve assets?
+	 */
+	assets?: TLAssetStore
 	/**
 	 * Asset URL overrides.
 	 */
 	assetUrls?: TLUiAssetUrlOverrides
+	/**
+	 * The document to use in place of the global document object for the following:
+	 *
+	 * - preloading fonts
+	 *
+	 * Using this prevents bugs when using pop-out windows in Electron.
+	 */
+	targetDocument?: Document
 	/**
 	 * Text options for the editor.
 	 */
@@ -96,7 +109,13 @@ export const TldrawImage = memo(function TldrawImage(props: TldrawImageProps) {
 		() => mergeArraysAndReplaceDefaults('type', _bindingUtils, defaultBindingUtils),
 		[_bindingUtils]
 	)
-	const store = useTLStore({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults })
+	const store = useTLStore({
+		assets: props.assets,
+		snapshot: props.snapshot,
+		shapeUtils: shapeUtilsWithDefaults,
+	})
+
+	const targetDocument = props.targetDocument ?? document
 
 	const {
 		pageId,
@@ -120,7 +139,7 @@ export const TldrawImage = memo(function TldrawImage(props: TldrawImageProps) {
 
 		let isCancelled = false
 
-		const tempElm = document.createElement('div')
+		const tempElm = targetDocument.createElement('div')
 		container.appendChild(tempElm)
 		container.classList.add('tl-container', 'tl-theme__light')
 
@@ -181,6 +200,7 @@ export const TldrawImage = memo(function TldrawImage(props: TldrawImageProps) {
 		pixelRatio,
 		assetUrlsWithOverrides,
 		textOptions,
+		targetDocument,
 	])
 
 	useEffect(() => {
diff --git a/node_modules/tldraw/src/lib/shapes/shared/defaultStyleDefs.tsx b/node_modules/tldraw/src/lib/shapes/shared/defaultStyleDefs.tsx
index 0c39a5a..eed5164 100644
--- a/node_modules/tldraw/src/lib/shapes/shared/defaultStyleDefs.tsx
+++ b/node_modules/tldraw/src/lib/shapes/shared/defaultStyleDefs.tsx
@@ -68,6 +68,7 @@ const generateImage = (dpr: number, currentZoom: number, darkMode: boolean) => {
 	return new Promise<Blob>((resolve, reject) => {
 		const size = TILE_PATTERN_SIZE * currentZoom * dpr
 
+		// NOTE: Maybe use editor container's ownerDocument
 		const canvasEl = document.createElement('canvas')
 		canvasEl.width = size
 		canvasEl.height = size
@@ -111,6 +112,7 @@ const generateImage = (dpr: number, currentZoom: number, darkMode: boolean) => {
 }
 
 const canvasBlob = (size: [number, number], fn: (ctx: CanvasRenderingContext2D) => void) => {
+	// NOTE: Maybe use editor container's ownerDocument
 	const canvas = document.createElement('canvas')
 	canvas.width = size[0]
 	canvas.height = size[1]
diff --git a/node_modules/tldraw/src/lib/ui/components/Toolbar/DefaultRichTextToolbar.tsx b/node_modules/tldraw/src/lib/ui/components/Toolbar/DefaultRichTextToolbar.tsx
index 075cfe2..b0615a6 100644
--- a/node_modules/tldraw/src/lib/ui/components/Toolbar/DefaultRichTextToolbar.tsx
+++ b/node_modules/tldraw/src/lib/ui/components/Toolbar/DefaultRichTextToolbar.tsx
@@ -188,6 +188,7 @@ function useIsMousingDownOnTextEditor(textEditor: TiptapEditor) {
 		touchDownEvents.forEach((eventName: string) => {
 			textEditor.view.dom.addEventListener(eventName, handlePointingDown)
 		})
+		const document = textEditor.view.dom.ownerDocument
 		touchUpEvents.forEach((eventName: string) => {
 			document.body.addEventListener(eventName, handlePointingUp)
 		})
diff --git a/node_modules/tldraw/src/lib/ui/components/Toolbar/OverflowingToolbar.tsx b/node_modules/tldraw/src/lib/ui/components/Toolbar/OverflowingToolbar.tsx
index 8a03a78..e5d1d52 100644
--- a/node_modules/tldraw/src/lib/ui/components/Toolbar/OverflowingToolbar.tsx
+++ b/node_modules/tldraw/src/lib/ui/components/Toolbar/OverflowingToolbar.tsx
@@ -102,7 +102,7 @@ export function OverflowingToolbar({ children }: OverflowingToolbarProps) {
 		rButtons.current = Array.from(mainToolsRef.current?.children ?? []).filter(
 			(el): el is HTMLElement => {
 				// only count html elements...
-				if (!(el instanceof HTMLElement)) return false
+				if (!el.instanceOf(HTMLElement)) return false
 
 				// ...that are buttons...
 				if (el.tagName.toLowerCase() !== 'button') return false
@@ -147,9 +147,9 @@ export function OverflowingToolbar({ children }: OverflowingToolbarProps) {
 			}
 		}
 
-		document.addEventListener('keydown', handleKeyDown)
+		editor.getContainer().ownerDocument.addEventListener('keydown', handleKeyDown)
 		return () => {
-			document.removeEventListener('keydown', handleKeyDown)
+			editor.getContainer().ownerDocument.removeEventListener('keydown', handleKeyDown)
 		}
 	}, [editor])
 
diff --git a/node_modules/tldraw/src/lib/ui/components/primitives/TldrawUiButtonPicker.tsx b/node_modules/tldraw/src/lib/ui/components/primitives/TldrawUiButtonPicker.tsx
index 661b78e..2e936aa 100644
--- a/node_modules/tldraw/src/lib/ui/components/primitives/TldrawUiButtonPicker.tsx
+++ b/node_modules/tldraw/src/lib/ui/components/primitives/TldrawUiButtonPicker.tsx
@@ -4,6 +4,7 @@ import {
 	StyleProp,
 	TLDefaultColorStyle,
 	TLDefaultColorTheme,
+	useContainer,
 	useEditor,
 } from '@tldraw/editor'
 import classNames from 'classnames'
@@ -43,6 +44,7 @@ export const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker<T extends
 		onHistoryMark,
 		theme,
 	} = props
+	const container = useContainer()
 	const editor = useEditor()
 	const msg = useTranslation()
 	const breakpoint = useBreakpoint()
@@ -58,7 +60,7 @@ export const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker<T extends
 	} = useMemo(() => {
 		const handlePointerUp = () => {
 			rPointing.current = false
-			window.removeEventListener('pointerup', handlePointerUp)
+			container.win.removeEventListener('pointerup', handlePointerUp)
 
 			// This is fun little micro-optimization to make sure that the focus
 			// is retained on a text label. That way, you can continue typing
@@ -90,8 +92,8 @@ export const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker<T extends
 			onValueChange(style, id as T)
 
 			rPointing.current = true
-			rPointingOriginalActiveElement.current = document.activeElement as HTMLElement
-			window.addEventListener('pointerup', handlePointerUp) // see TLD-658
+			rPointingOriginalActiveElement.current = container.ownerDocument.activeElement as HTMLElement
+			container.win.addEventListener('pointerup', handlePointerUp) // see TLD-658
 		}
 
 		const handleButtonPointerEnter = (e: React.PointerEvent<HTMLButtonElement>) => {
@@ -114,7 +116,7 @@ export const TldrawUiButtonPicker = memo(function TldrawUiButtonPicker<T extends
 			handleButtonPointerEnter,
 			handleButtonPointerUp,
 		}
-	}, [editor, breakpoint, value, onHistoryMark, onValueChange, style])
+	}, [editor, breakpoint, value, onHistoryMark, onValueChange, style, container])
 
 	return (
 		<TldrawUiToolbarToggleGroup
diff --git a/node_modules/tldraw/src/lib/ui/hooks/useClipboardEvents.ts b/node_modules/tldraw/src/lib/ui/hooks/useClipboardEvents.ts
index aef5f13..f449e57 100644
--- a/node_modules/tldraw/src/lib/ui/hooks/useClipboardEvents.ts
+++ b/node_modules/tldraw/src/lib/ui/hooks/useClipboardEvents.ts
@@ -83,7 +83,7 @@ const INPUTS = ['input', 'select', 'textarea']
  * @internal
  */
 function areShortcutsDisabled(editor: Editor) {
-	const { activeElement } = document
+	const { activeElement } = editor.getContainer().ownerDocument
 
 	return (
 		editor.menus.hasAnyOpenMenus() ||
@@ -691,7 +691,10 @@ export function useMenuClipboardEvents() {
 			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null) return
 
-			if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
+			if (
+				Array.isArray(data) &&
+				data[0] instanceof editor.getContainer().win.window.ClipboardItem
+			) {
 				handlePasteFromClipboardApi({ editor, clipboardItems: data, point })
 				trackEvent('paste', { source: 'menu' })
 			} else {
@@ -761,6 +764,7 @@ export function useNativeClipboardEvents() {
 			}
 		}
 
+		const container = editor.getContainer()
 		const paste = (e: ClipboardEvent) => {
 			if (disablingMiddleClickPaste) {
 				stopEventPropagation(e)
@@ -790,7 +794,6 @@ export function useNativeClipboardEvents() {
 					handlePasteFromEventClipboardData(editor, e.clipboardData, point)
 				}
 			}
-
 			// if we can read from the clipboard API, we want to try using that first. that allows
 			// us to access most things, and doesn't strip out metadata added to tldraw's own
 			// copy-as-png features - so copied shapes come back in at the correct size.
@@ -801,7 +804,10 @@ export function useNativeClipboardEvents() {
 				const fallbackFiles = Array.from(e.clipboardData?.files || [])
 				navigator.clipboard.read().then(
 					(clipboardItems) => {
-						if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
+						if (
+							Array.isArray(clipboardItems) &&
+							clipboardItems[0] instanceof container.win.window.ClipboardItem
+						) {
 							handlePasteFromClipboardApi({ editor, clipboardItems, point, fallbackFiles })
 						}
 					},
@@ -818,16 +824,16 @@ export function useNativeClipboardEvents() {
 			trackEvent('paste', { source: 'kbd' })
 		}
 
-		document.addEventListener('copy', copy)
-		document.addEventListener('cut', cut)
-		document.addEventListener('paste', paste)
-		document.addEventListener('pointerup', pointerUpHandler)
+		container.ownerDocument.addEventListener('copy', copy)
+		container.ownerDocument.addEventListener('cut', cut)
+		container.ownerDocument.addEventListener('paste', paste)
+		container.ownerDocument.addEventListener('pointerup', pointerUpHandler)
 
 		return () => {
-			document.removeEventListener('copy', copy)
-			document.removeEventListener('cut', cut)
-			document.removeEventListener('paste', paste)
-			document.removeEventListener('pointerup', pointerUpHandler)
+			container.ownerDocument.removeEventListener('copy', copy)
+			container.ownerDocument.removeEventListener('cut', cut)
+			container.ownerDocument.removeEventListener('paste', paste)
+			container.ownerDocument.removeEventListener('pointerup', pointerUpHandler)
 		}
 	}, [editor, trackEvent, appIsFocused])
 }
diff --git a/node_modules/tldraw/src/lib/ui/hooks/useKeyboardShortcuts.ts b/node_modules/tldraw/src/lib/ui/hooks/useKeyboardShortcuts.ts
index 796a958..578b4c7 100644
--- a/node_modules/tldraw/src/lib/ui/hooks/useKeyboardShortcuts.ts
+++ b/node_modules/tldraw/src/lib/ui/hooks/useKeyboardShortcuts.ts
@@ -3,6 +3,7 @@ import {
 	TLPointerEventInfo,
 	isAccelKey,
 	preventDefault,
+	useContainer,
 	useEditor,
 	useValue,
 } from '@tldraw/editor'
@@ -23,6 +24,7 @@ const SKIP_KBDS = [
 
 /** @public */
 export function useKeyboardShortcuts() {
+	const container = useContainer()
 	const editor = useEditor()
 
 	const isReadonlyMode = useReadonly()
@@ -142,7 +144,7 @@ export function useKeyboardShortcuts() {
 		return () => {
 			disposables.forEach((d) => d())
 		}
-	}, [actions, tools, isReadonlyMode, editor, isFocused])
+	}, [actions, tools, isReadonlyMode, editor, container, isFocused])
 }
 
 export function areShortcutsDisabled(editor: Editor) {
diff --git a/node_modules/tldraw/src/lib/utils/assets/preload-font.ts b/node_modules/tldraw/src/lib/utils/assets/preload-font.ts
index 2612566..1296abe 100644
--- a/node_modules/tldraw/src/lib/utils/assets/preload-font.ts
+++ b/node_modules/tldraw/src/lib/utils/assets/preload-font.ts
@@ -12,7 +12,7 @@ export interface TLTypeFace {
 }
 
 /** @public */
-export async function preloadFont(id: string, font: TLTypeFace) {
+export async function preloadFont(id: string, font: TLTypeFace, targetDocument?: Document) {
 	const {
 		url,
 		style = 'normal',
@@ -38,7 +38,7 @@ export async function preloadFont(id: string, font: TLTypeFace) {
 
 	const fontInstance = new FontFace(id, `url(${url})`, descriptors)
 	await fontInstance.load()
-	document.fonts.add(fontInstance)
+	;(targetDocument ?? document).fonts.add(fontInstance)
 
 	// @ts-expect-error
 	fontInstance.$$_url = url
diff --git a/node_modules/tldraw/src/lib/utils/export/export.ts b/node_modules/tldraw/src/lib/utils/export/export.ts
index 15c9378..97d0d22 100644
--- a/node_modules/tldraw/src/lib/utils/export/export.ts
+++ b/node_modules/tldraw/src/lib/utils/export/export.ts
@@ -74,7 +74,7 @@ const clipboardMimeTypesByFormat = {
 	jpeg: 'image/jpeg',
 	png: 'image/png',
 	webp: 'image/webp',
-	svg: 'text/plain',
+	svg: 'image/svg+xml',
 }
 
 export function exportToImagePromiseForClipboard(
